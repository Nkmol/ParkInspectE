<UserControl x:Class="ParkInspect.View.UserControls.AssignmentControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:validationRules="clr-namespace:ParkInspect.Model.ValidationRules"
             mc:Ignorable="d" Height="482" Width="982"
             DataContext="{Binding Assignment, Source={StaticResource Locator}}">


    <Grid>
        <TabControl HorizontalAlignment="Left" VerticalAlignment="Top">
            <TabItem Header="Overview">
                <StackPanel>
                    <DockPanel>
                        <!-- Textbox needs to activete search command afther an enter press.-->
                        <TextBox Width="118" Margin="0,3" Text="{Binding ClientFilter, UpdateSourceTrigger=PropertyChanged}" />
                        <TextBox Width="189" Margin="5,3,0,3" Text="{Binding StateFilter, UpdateSourceTrigger=PropertyChanged}" />
                        <TextBox Width="157" Margin="5,3,0,3" Text="{Binding DateFilter, UpdateSourceTrigger=PropertyChanged}" />
                        <TextBox Width="154" Margin="5,3,0,3" Text="{Binding DeadlineFilter, UpdateSourceTrigger=PropertyChanged}" />
                        <TextBox Width="148" Margin="5,3,0,3" IsEnabled="False" HorizontalAlignment="Left"/>
                        <TextBox Width="170" Margin="5,3,0,3" Text="{Binding ClarificationFilter, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" />
                    </DockPanel>

                    <!-- na het wijzigen van een item, is het niet mogelijk het gewijzigde item met een klik te selecteren.-->
                    <DataGrid Width="969" ItemsSource="{Binding SearchedAsignments}"  SelectedItem="{Binding SelectedAsignment, UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False" IsReadOnly="True" HorizontalAlignment="Left" Height="392" Margin="0,0,-2,0" >
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Client" Width="*"  Binding="{Binding Client.name, Mode=OneWay}" />
                            <DataGridTextColumn  Header="State" Width="*" Binding="{Binding state, Mode=OneWay}"/>
                            <DataGridTextColumn  Header="Aangemaakt" Width="*" Binding="{Binding date, StringFormat={}{0:dd/MM/yyyy}, Mode=OneWay}"/>
                            <DataGridTextColumn  Header="Deadline" Width="*" Binding="{Binding deadline, StringFormat={}{0:dd/MM/yyyy}, Mode=OneWay}"/>


                            <DataGridComboBoxColumn Width="*" Header="Inspections" SelectedValueBinding="{Binding Inspections}" IsReadOnly="True" />

                            <DataGridTextColumn  Header="Clarification" Width="*" Binding="{Binding clarification}"/>


                        </DataGrid.Columns>
                    </DataGrid>
                </StackPanel>

            </TabItem>
            <TabItem Header="Management" Margin="-1,0,1,0">
                <DockPanel>
                    <ScrollViewer VerticalScrollBarVisibility="Auto" Width="381" VerticalAlignment="Top" Height="431">
                        <StackPanel Width="300" Height="454">
                            
                            <Label Height="25" Margin="10,0,151,0" Content="Date"  />
                            <DatePicker Margin="10,0,57,0"  Text="{Binding SelectedAsignment.date, StringFormat={}{0:dd/MM/yyyy}}" IsEnabled="False"/>


                            <Label Height="25" Margin="10,5,151,0" Content="Deadline"  />
                            <DatePicker Name="DeadlinePicker" Margin="10,0,57,0"  DisplayDate="{Binding SelectedAsignment.deadline, StringFormat={}{0:dd/MM/yyyy} , Mode=OneWay}" >
                                <DatePicker.SelectedDate>
                                    <Binding Path="SelectedAsignment.deadline" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validationRules:IsNotEmptyValidationRule ValidationStep="RawProposedValue" ValidatesOnTargetUpdated="True" />
                                            <validationRules:IsValidDateTimeRule ValidationStep="ConvertedProposedValue" ValidatesOnTargetUpdated="True"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </DatePicker.SelectedDate>
                            </DatePicker>


                            <Label Height="25" Margin="10,5,151,0" Content="Status"  />
                            <ComboBox Name="StatusBox" Height="25" Margin="10,0,57,0"  ItemsSource="{Binding AssignmentStatusList}" DisplayMemberPath="state1" SelectedItem="{Binding SelectedAsignment.State1}" >
                                <ComboBox.Text>
                                    <Binding Path="SelectedAsignment.state" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validationRules:IsNotEmptyValidationRule ValidationStep="RawProposedValue" ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </ComboBox.Text>
                            </ComboBox>


                            <Label Height="25" Margin="10,5,151,0" Content="Klant" />
                            <ComboBox Name="ClientBox"  Margin="10,0,57,0"  ItemsSource="{Binding ClientList}" DisplayMemberPath="name" SelectedItem="{Binding SelectedAsignment.Client}"  >
                                <ComboBox.Text>
                                    <Binding Path="SelectedAsignment.Client.name" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validationRules:IsNotEmptyValidationRule ValidationStep="RawProposedValue" ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </ComboBox.Text>
                            </ComboBox>



                            <Label Height="25" Margin="10,5,151,0" Content="Toelichting" />
                            <TextBox Name="Clarificationbox"  Margin="10,0,57,0" Height="105" Text="{Binding SelectedAsignment.clarification}"/>

                            <Label Height="27" Foreground="Red" Content="{Binding CommandError}" FontSize="12"  Margin="10,0,24,0" Background="{x:Null}"/>
                            <DockPanel Width="243" HorizontalAlignment="Left">

                                <Button  Margin="5,0,0,0" Content="Bewerken" Command="{Binding EditAsignmentCommand, UpdateSourceTrigger=PropertyChanged}" Width="82" HorizontalAlignment="Right">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding ElementName=ClientBox, Path=(Validation.HasError)}" Value="false" />
                                                        <Condition Binding="{Binding ElementName=StatusBox, Path=(Validation.HasError)}" Value="false" />
                                                        <Condition Binding="{Binding ElementName=DeadlinePicker, Path=(Validation.HasError)}" Value="false" />
                                                        <Condition Binding="{Binding ElementName=Clarificationbox, Path=(Validation.HasError)}" Value="false" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="true" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>


                            </DockPanel>
                        </StackPanel>
                    </ScrollViewer>
                    <StackPanel Width="215"/>
                    <StackPanel Height="435" Width="380">

                        <GroupBox x:Name="Inspecties" Header="Inspecties" Margin="0,5,0,0" Height="204" Width="363" HorizontalAlignment="Left">
                            <DataGrid ItemsSource="{Binding SelectedAsignment.Inspections}" SelectedItem="{Binding SelectedInspection}" AutoGenerateColumns="False" Margin="0,0,-2,0">
                                <DataGrid.Columns>

                                    <DataGridTextColumn Header="Parkeerplaats" Width="*" Binding="{Binding Parkinglot.name}" />
                                    <DataGridTextColumn  Header="Datum" Width="*" Binding="{Binding date}"/>


                                </DataGrid.Columns>
                            </DataGrid>

                        </GroupBox>

                        <StackPanel Height="7">
                        </StackPanel>
                        <DockPanel Width="363" HorizontalAlignment="Left">
                            <Button  Margin="5,0" Content="Toevoegen" Command="{Binding CreateInspectionCommand}" Width="126" HorizontalAlignment="Left"/>
                            <Button Margin="5,0" Content="Verwijderen" Width="88" HorizontalAlignment="Left"/>



                        </DockPanel>
                        <ComboBox Margin="5,5,57,0"  ItemsSource="{Binding InspectionList}" DisplayMemberPath="Identifier" SelectedItem="{Binding SelectedInspection}" Height="15" HorizontalAlignment="Left" VerticalAlignment="Top" Width="318" />
                        <Label Height="33" Foreground="Red" Content="{Binding CommandError}" FontSize="8" RenderTransformOrigin="0.5,0.5">
                            <Label.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform AngleX="-1.447"/>
                                    <RotateTransform/>
                                    <TranslateTransform X="-0.796"/>
                                </TransformGroup>
                            </Label.RenderTransform>
                        </Label>
                        <Button  Margin="0,0,5,0" Content="Leeg Scherm" Command="{Binding ResetCommand}" Width="111" HorizontalAlignment="Left"/>
                    </StackPanel>
                </DockPanel>

            </TabItem>
        </TabControl>
    </Grid>
</UserControl>
